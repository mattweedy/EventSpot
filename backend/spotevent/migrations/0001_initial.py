# Generated by Django 4.1.13 on 2024-02-04 21:42

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=50)),
                ('country', models.CharField(max_length=50)),
                ('region', models.CharField(max_length=50)),
                ('longitude', models.CharField(max_length=50)),
                ('localized_address_display', models.CharField(max_length=200)),
                ('postal_code', models.CharField(max_length=50, null=True)),
                ('address_1', models.CharField(max_length=200)),
                ('address_2', models.CharField(max_length=200)),
                ('latitude', models.CharField(max_length=50)),
                ('localized_multi_line_address_display', models.TextField()),
                ('localized_area_display', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('url', models.URLField()),
                ('eventbrite_event_id', models.UUIDField()),
                ('summary', models.TextField(null=True)),
                ('timezone', models.CharField(max_length=50)),
                ('tickets_url', models.URLField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('status', models.CharField(max_length=50)),
                ('_type', models.CharField(max_length=50)),
                ('is_cancelled', models.BooleanField()),
                ('hide_start_date', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('url', models.URLField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='MaximumTicketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(max_length=50)),
                ('major_value', models.CharField(max_length=50)),
                ('value', models.IntegerField()),
                ('display', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='MinimumTicketPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(max_length=50)),
                ('major_value', models.CharField(max_length=50)),
                ('value', models.IntegerField()),
                ('display', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Pagination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_count', models.IntegerField()),
                ('continuation', models.TextField()),
                ('page_count', models.IntegerField()),
                ('page_size', models.IntegerField()),
                ('has_more_items', models.BooleanField()),
                ('page_number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.CharField(max_length=50)),
                ('tag', models.CharField(max_length=50)),
                ('display_name', models.CharField(max_length=50)),
                ('_type', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TicketAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_free', models.BooleanField()),
                ('has_bogo_tickets', models.BooleanField()),
                ('has_available_tickets', models.BooleanField()),
                ('is_sold_out', models.BooleanField()),
                ('maximum_ticket_price', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.maximumticketprice')),
                ('minimum_ticket_price', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.minimumticketprice')),
            ],
        ),
        migrations.CreateModel(
            name='ResponseModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('events', models.ManyToManyField(to='backend.event')),
                ('pagination', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.pagination')),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryVenue',
            fields=[
                ('_type', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=50)),
                ('venue_profile_id', models.UUIDField()),
                ('venue_profile_url', models.URLField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.address')),
            ],
        ),
        migrations.CreateModel(
            name='PrimaryOrganizer',
            fields=[
                ('_type', models.CharField(max_length=50)),
                ('num_upcoming_events', models.IntegerField()),
                ('name', models.CharField(max_length=50)),
                ('profile_type', models.CharField(max_length=50)),
                ('num_followers', models.IntegerField()),
                ('url', models.URLField()),
                ('twitter', models.URLField(null=True)),
                ('summary', models.TextField(null=True)),
                ('num_saves', models.IntegerField()),
                ('followed_by_you', models.BooleanField()),
                ('facebook', models.URLField(null=True)),
                ('num_collections', models.IntegerField()),
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('website_url', models.URLField(null=True)),
                ('num_following', models.IntegerField()),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.image')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='image',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backend.image'),
        ),
        migrations.AddField(
            model_name='event',
            name='primary_organizer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.primaryorganizer'),
        ),
        migrations.AddField(
            model_name='event',
            name='primary_venue',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.primaryvenue'),
        ),
        migrations.AddField(
            model_name='event',
            name='tags',
            field=models.ManyToManyField(to='backend.tag'),
        ),
        migrations.AddField(
            model_name='event',
            name='ticket_availability',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.ticketavailability'),
        ),
    ]
